remove --global flag to work with local

git config --global --get user.name   : get name
git config --global --get user.email  : get email

git config --global user.name "name"                : add name
git config --global user.email "name@example.com"   : add email

…or create a new repository on the command line

echo "# Object_Tracking" >> README.md
git init

add specific file
  git add README.md
  
Add files to staging

  git add --all
  git add -A
  git add .

git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/kavinda-ravishan/Object_Tracking.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/kavinda-ravishan/Object_Tracking.git
git branch -M main
git push -u origin main

git pull origin main : pull form git remote
git status : show status
git branch branch_name : create new branch
git branch --list : show all branches
git checkout branch_name : switch to branch
git checkout -b branch_name : create and switch to new branch

touch file_name : create new file
git status : show untraked file
git add . : add all untracked changes
git commit -m "message"
git push --set-upstream origin alpha : push with new brach

git clone URL -b branch_name

log:
  git log --oneline : show all previous commits summary
  git log : show all previous commits
    Result :
      commit 55f9942b936a771837b8b5af61ac9e4eda974171 (HEAD -> master)
      Author: kavinda-ravishan <kvnravishan@outlook.com>
      Date:   Tue Mar 1 15:33:46 2022 +0530

          init
      
    HEAD : currently working branch (master)
    55f9942b936a771837b8b5af61ac9e4eda974171 : unique commit hash


git environments:
  * working : after last commit
  * staging : "git add" command  
  * commit  : "git commit" command (new log entry create with new hash)

git status : show status
file status:
  * tracked   : files exists in previous commit
    * unmodified
    * modified
    * staged
  * untracked : everything else

restore to previous commit (changes only apply for untracked files):
  git restore .
  git restore file_name
  git checkout .

remove form staging (after "git add" command):
  git restore --staged .
  git restore --staged file_name


gitignore:
  note.txt : ignore a file
  note_folder/ : ignore a folder
  /*-todo.md : ignore any __-todo.md files in current directory
  */*-todo.md : ignore any __-todo.md files in sub directory
  **/*-todo.md : ignore any __-todo.md files in current/sub directory

global ignore file:
  git config --global core.excludefile file_name

  clear cache:
    git rm -r --cached .

delete files:
  git rm file_name : delete the file and add that deletion to staging
  restore the file :
    git restore -S file_name, git restore file_name 


rename files:
  git mv file_name new_file_name

differences:
  git diff : show differences made in project after last staging
  git diff commit_hash: show differences between now and commit hash
    ex : "git diff 55f9942" or "git diff 55f9942b936a771837b8b5af61ac9e4eda974171"

Amending:
  git commit --amend : amend commit to previous commit('i' for edit text (ex: change message), ':wq' : write and quit)
  git commit -am 'new commit message'
  git commit -amend --no-edit

reset:
  git reset commit_hash : reset git state to previous git commit (does not change or delete files)
  git reset --hard commit_hash : reset git state to previous git commit (change and delete files / not safe)

rebasing:
  git rebase --interactive <branch>/<commit>
  git rebase -i HEAD-# : (# : number of commits need to show (if you have long list of commits))
  git rebase -i --root : change commit order 
    (replace 'pick' with 's' to combine commit with previous commit and update with new commit message)
    (replace 'pick' with 'f' to combine commit with previous commit and keep previous commit message)
