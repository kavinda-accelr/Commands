https://youtu.be/fqMOX6JJhGo

sudo apt install docker.io
docker --version
sudo systemctl enable --now docker
sudo systemctl status docker

//Download an example image and run a container 
sudo docker run image-name : pull and run
sudo docker pull image-name : just pull the image

//Download run and goto centos bash and stop the container
sudo docker run -d -t --name cent centos : Down load centOS name the container as cent and run
sudo docker exec -it cent bash : connect cent bash (exec - execute)
sudo docker stop cent : stop container Ex : Name of container cent

//Show images
sudo docker images : Show all local images
sudo docker image ls : show all images

//Show containers
sudo docker ps : Show running images
sudo docker ps -a: Show running and stoped images

//Dockerfile 

FROM node:9-slim
WORKDIR /app
COPY package.json /app
RUN npm install
COPY . /app
CMD ["npm", "start"]

//
CMD ["command", "param1"]: Exicute when container start running

ENTRYPOINT ["sleep"] : docker run ubuntu-sleep 10 (sleep 10)
CMD ["5"] : default value, can overwrit by ubuntu-sleep 10
docker run --entrypoint sleep2.0 ubuntu-sleep 10 : overwrite sleep CMD

//Build and run containers
sudo docker build -t name-the-docker-image . : Build container('.' is for currunt dir)
sudo docker run -it -p 3000:3000 --name name-container docker-image-name ( it - interactive terminal, d - detached mode )

sudo docker run -d -p 3001:3000 --name name-container docker-image-name ( map pc port 3001 to container port 3000 )
sudo docker run -d -p 3000:3000 chat-app ( Docker give random name for the container )
sudo docker attach container-name : Attach to detached running container

//Start, Stop containers build
sudo docker start container-name : start build container
sudo docker stop running-container-name : Stop running container

//Remove images and containers
sudo docker rm docker-container-name : remove container
sudo docker rm docker-container-name -f : remove running container (-f force)
sudo docker rmi docker-image-name : remove image
docker system prune -a : delete all images

//Tag
docker pull image_name:tag , docker run image_name:tag (Ex : docker pull node:14-slim)

docker inspect docker_image_name : get all details
docker logs container_name : get content written to standet out from detached mode
dockre history image_name : show all layers with information

//environment variables (-e or --env)
docker run -i -p 80:3000 -e PORT=3000 --name app chat-app : Env PORT:3000
docker run -i -p 80:3000 -e PORT=3000 -e TOKEN_SECRET=DsofjiU&*Yfdn3k --name app chat-app : multiple envs

//by creating .env file and put all envs
--env-file ./.env

//Networks
docker run ubuntu : Bridge, default, have intrnal IP
docker run ubuntu --network=host : host network
docker run ubuntu --network=none : completely isolated

//Controll groups(cgroups)
docker run --cpus=0.5 ubuntu : Container cannot exceed 50% of cpu usage
docker run --memory=100m ubuntu : Container cannot exceed 100mb of memory usage

//Binding

-v /home/app:/var/db : map pc /home/app dir to container var/db
-v path_to_folder_location:path_to_container_location (need to use absolute path or full path)
( for get dir : win cmd = %cd% , win power shell = ${pwd} , linux = $(pwd) )
docker run -v $(pwd):/app -v /app/node_modules -p 3000:3000 -d --name node-app node-app-image (for fix overwriting node_module folder)

//read only bind
docker run -v $(pwd):/app:ro -v /app/node_modules -p 3000:3000 -d --name node-app node-app-image

//Volumes

/var/lib/docker

//volume mount
docker volume create vol1
docker run -v vol1:/var/lib/mysql mysql

//bind mount
docker run -v /data/mysql:/var/lib/mysql mysql

//get in to container
docker exec -it container-name bash : open bash terminal of container (type : exit , for exit form container)

//see log files
docker logs container-name
